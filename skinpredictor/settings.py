# """
# Django settings for skinpredictor project.

# Generated by 'django-admin startproject' using Django 5.1.5.

# For more information on this file, see
# https://docs.djangoproject.com/en/5.1/topics/settings/

# For the full list of settings and their values, see
# https://docs.djangoproject.com/en/5.1/ref/settings/
# """

# from pathlib import Path
# import os
# import torch
# import numpy as np
# import random
# import dj_database_url

# # --- START: Deterministic Setup ---
# SEED = 42

# def set_deterministic_environment(seed):
#     torch.manual_seed(seed)
#     if torch.cuda.is_available():
#         torch.cuda.manual_seed(seed)
#         torch.cuda.manual_seed_all(seed)
#         torch.backends.cudnn.deterministic = True
#         torch.backends.cudnn.benchmark = False
#     torch.set_num_threads(1)
#     torch.set_num_interop_threads(1)
#     np.random.seed(seed)
#     random.seed(seed)
#     os.environ['PYTHONHASHSEED'] = str(seed)

# set_deterministic_environment(SEED)

# BASE_DIR = Path(__file__).resolve().parent.parent

# # --- IMPORTANT: Get SECRET_KEY from environment variable ---
# # Use a production-safe method for SECRET_KEY
# SECRET_KEY = os.environ.get('SECRET_KEY', 'your_insecure_default_key_for_dev')

# # --- ENVIRONMENT SETTINGS ---
# # Set DEBUG to False for production
# DEBUG = False

# # Add your PythonAnywhere domain to ALLOWED_HOSTS
# # Replace 'your-username' with your actual PythonAnywhere username
# ALLOWED_HOSTS = ['glowgenieskincare.pythonanywhere.com', 'localhost', '127.0.0.1']

# # Update CSRF_TRUSTED_ORIGINS to include your PythonAnywhere domain
# CSRF_TRUSTED_ORIGINS = ['https://glowgenieskincare.pythonanywhere.com']

# INSTALLED_APPS = [
#     'django.contrib.admin',
#     'django.contrib.auth',
#     'django.contrib.contenttypes',
#     'django.contrib.sessions',
#     'django.contrib.messages',
#     'django.contrib.staticfiles',
#     'corsheaders',
#     'jsoneditor',
#     'predictor',
#     'users',
#     'reviews',
#     'skin_identifier',
#     'chatbot',
#     'django.contrib.sites',
#     'allauth',
#     'allauth.account',
#     'allauth.socialaccount',
#     'allauth.socialaccount.providers.google',
#     'allauth.socialaccount.providers.facebook',
#     'allauth.socialaccount.providers.github',
# ]

# MIDDLEWARE = [
#     'django.middleware.security.SecurityMiddleware',
#     # WhiteNoise is recommended for serving static files on production
#     # 'whitenoise.middleware.WhiteNoiseMiddleware',
#     'django.contrib.sessions.middleware.SessionMiddleware',
#     'django.middleware.common.CommonMiddleware',
#     'django.middleware.csrf.CsrfViewMiddleware',
#     'django.contrib.auth.middleware.AuthenticationMiddleware',
#     'django.contrib.messages.middleware.MessageMiddleware',
#     'django.middleware.clickjacking.XFrameOptionsMiddleware',
#     'corsheaders.middleware.CorsMiddleware',
#     'allauth.account.middleware.AccountMiddleware',
# ]

# LOGIN_URL = 'auth_page'
# LOGIN_REDIRECT_URL = '/'
# CORS_ALLOW_ALL_ORIGINS = True
# ROOT_URLCONF = 'skinpredictor.urls'

# TEMPLATES = [
#     {
#         'BACKEND': 'django.template.backends.django.DjangoTemplates',
#         'DIRS': [
#             os.path.join(BASE_DIR, 'templates'),
#         ],
#         'APP_DIRS': True,
#         'OPTIONS': {
#             'context_processors': [
#                 'django.template.context_processors.debug',
#                 'django.template.context_processors.request',
#                 'django.contrib.auth.context_processors.auth',
#                 'django.contrib.messages.context_processors.messages',
#                 'django.template.context_processors.request',
#                 'social_django.context_processors.backends',
#                 'social_django.context_processors.login_redirect',
#             ],
#         },
#     },
# ]

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'console': {
#             'class': 'logging.StreamHandler',
#         },
#     },
#     'root': {
#         'handlers': ['console'],
#         'level': 'WARNING',
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console'],
#             'level': 'WARNING',
#             'propagate': False,
#         },
#         'predictor': {
#             'handlers': ['console'],
#             'level': 'WARNING',
#             'propagate': False,
#         },
#         'chatbot': {
#             'handlers': ['console'],
#             'level': 'WARNING',
#             'propagate': False,
#         },
#     },
# }

# WSGI_APPLICATION = 'skinpredictor.wsgi.application'

# # --- DATABASE CONFIGURATION FOR PYTHONANYWHERE POSTGRESQL ---
# # This configuration is for connecting to your PostgreSQL database on PythonAnywhere.
# # You will need to replace the placeholders with your actual database details.
# # Get these from the "Databases" tab on your PythonAnywhere dashboard.
# # You need to create a database and a user first.
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'glowgenieskincare$default', # This is the database name
#         'USER': 'glowgenieskincare', # This is your username
#         'PASSWORD': 'glowgeniefyp2025@@', # Use the password you set in the screenshot
#         'HOST': 'glowgenieskincare-4778.postgres.pythonanywhere-services.com',
#         'PORT': '14778',
#     }
# }

# AUTH_PASSWORD_VALIDATORS = [
#     {
#         'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
#     },
# ]

# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# CONTACT_EMAIL = 'skinissuesfyp@gmail.com'

# LANGUAGE_CODE = 'en-us'
# TIME_ZONE = 'UTC'
# USE_I18N = True
# USE_TZ = True

# # --- STATIC FILES CONFIGURATION FOR PRODUCTION ---
# # PythonAnywhere serves static files directly from a designated directory.
# # `STATIC_ROOT` must be set to the absolute path where all static files will be collected.
# STATIC_URL = '/static/'
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'skinpredictor', 'static'),
# ]

# # --- MEDIA FILES CONFIGURATION FOR PRODUCTION ---
# # PythonAnywhere also serves media files directly.
# # `MEDIA_ROOT` should be the absolute path where user-uploaded files are stored.
# MEDIA_URL = '/media/'
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# # Ensure `DEBUG` is set to `False` in production
# # The following settings are security best practices for a production environment.
# if not DEBUG:
#     X_FRAME_OPTIONS = 'DENY'
#     SECURE_CONTENT_TYPE_NOSNIFF = True
#     SECURE_BROWSER_XSS_FILTER = True
#     # The `whitenoise` middleware is useful if you are not using PythonAnywhere's static file mapping
#     # but since PythonAnywhere has a built-in static file server, it is not strictly necessary.
#     # To use `whitenoise`, uncomment the middleware line above and install the package.
#     # STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# SITE_ID = 1

# AUTHENTICATION_BACKENDS = {
#     'django.contrib.auth.backends.ModelBackend',
#     'allauth.account.auth_backends.AuthenticationBackend',
# }

# SOCIALACCOUNT_PROVIDERS = {
#     'google': {
#         'APP': {
#             'client_id': os.environ.get('GOOGLE_CLIENT_ID'),
#             'secret': os.environ.get('GOOGLE_SECRET_KEY'),
#             'key': '',
#         }
#     },
#     'facebook': {
#         'APP': {
#             'client_id': os.environ.get('FACEBOOK_CLIENT_ID'),
#             'secret': os.environ.get('FACEBOOK_SECRET_KEY'),
#             'key': ''
#         }
#     },
#     'github': {
#         'APP': {
#             'client_id': os.environ.get('GITHUB_CLIENT_ID'),
#             'secret': os.environ.get('GITHUB_SECRET_KEY'),
#             'key': ''
#         }
#     }
# }

# CSRF_TRUSTED_ORIGINS = [
#     "http://localhost:8000",
#     "https://glow-genie-organic-skin-care.onrender.com",
#     "https://glowgenieskincare.pythonanywhere.com"  # Added PythonAnywhere domain
# ]

# LOGIN_URL = 'auth_page'
# LOGIN_REDIRECT_URL = '/'
# ACCOUNT_LOGOUT_REDIRECT_URL = 'auth_page'
# DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


"""
Django settings for skinpredictor project.
"""

from pathlib import Path
import os
import dj_database_url
import torch
import numpy as np
import random
import sys

# --- START: Deterministic Setup ---
SEED = 42

def set_deterministic_environment(seed):
    torch.manual_seed(seed)
    if torch.cuda.is_available():
        torch.cuda.manual_seed(seed)
        torch.cuda.manual_seed_all(seed)
        torch.backends.cudnn.deterministic = True
        torch.backends.cudnn.benchmark = False
    torch.set_num_threads(1)
    torch.set_num_interop_threads(1)
    np.random.seed(seed)
    random.seed(seed)
    os.environ['PYTHONHASHSEED'] = str(seed)

set_deterministic_environment(SEED)

BASE_DIR = Path(__file__).resolve().parent.parent

# --- CORE SETTINGS FROM ENVIRONMENT VARIABLES ---
# Get SECRET_KEY from a Fly.io secret
SECRET_KEY = os.environ.get('SECRET_KEY', 'your_insecure_default_key_for_dev')

# Use an environment variable for DEBUG mode
DEBUG = os.environ.get('DEBUG') == 'True'

# Get the app name from Fly.io's environment variable
FLY_APP_NAME = os.environ.get('FLY_APP_NAME')

# Dynamically set ALLOWED_HOSTS for Fly.io and local development
if FLY_APP_NAME:
    ALLOWED_HOSTS = [f"{FLY_APP_NAME}.fly.dev", "localhost", "127.0.0.1"]
else:
    # This is for local development only
    ALLOWED_HOSTS = ['localhost', '127.0.0.1']
    
# Dynamically set CSRF_TRUSTED_ORIGINS
CSRF_TRUSTED_ORIGINS = [f"https://{FLY_APP_NAME}.fly.dev"] if FLY_APP_NAME else []
CSRF_TRUSTED_ORIGINS.extend(["http://localhost:8000"])

# --- APPLICATION DEFINITION ---
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third-party apps
    'whitenoise.runserver_nostatic', # For serving static files in development
    'corsheaders',
    'jsoneditor',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.facebook',
    'allauth.socialaccount.providers.github',
    'django.contrib.sites',
    # Your project apps
    'predictor',
    'users',
    'reviews',
    'skin_identifier',
    'chatbot',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # WhiteNoise is required for serving static files in production
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

LOGIN_URL = 'auth_page'
LOGIN_REDIRECT_URL = '/'
CORS_ALLOW_ALL_ORIGINS = True
ROOT_URLCONF = 'skinpredictor.urls'

# --- TEMPLATES ---
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'allauth.account.context_processors.account',
                'allauth.socialaccount.context_processors.socialaccount',
            ],
        },
    },
]

WSGI_APPLICATION = 'skinpredictor.wsgi.application'

# --- DATABASE CONFIGURATION FOR FLY.IO ---
# Fly.io automatically sets a DATABASE_URL environment variable.
if os.environ.get('DATABASE_URL'):
    DATABASES = {
        'default': dj_database_url.config(conn_max_age=600)
    }
else:
    # Fallback to a local SQLite database for development if needed
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# --- AUTHENTICATION & ALLAUTH SETTINGS ---
AUTHENTICATION_BACKENDS = {
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
}

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': os.environ.get('GOOGLE_CLIENT_ID'),
            'secret': os.environ.get('GOOGLE_SECRET_KEY'),
        }
    },
    'facebook': {
        'APP': {
            'client_id': os.environ.get('FACEBOOK_CLIENT_ID'),
            'secret': os.environ.get('FACEBOOK_SECRET_KEY'),
        }
    },
    'github': {
        'APP': {
            'client_id': os.environ.get('GITHUB_CLIENT_ID'),
            'secret': os.environ.get('GITHUB_SECRET_KEY'),
        }
    }
}

LOGIN_REDIRECT_URL = '/'
ACCOUNT_LOGOUT_REDIRECT_URL = 'auth_page'
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
SITE_ID = 1

# --- STATIC FILES CONFIGURATION FOR PRODUCTION (WHITENOISE) ---
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'skinpredictor', 'static'),
]
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# --- MEDIA FILES (USER UPLOADS) ---
# For production, it is highly recommended to use a cloud storage service
# like AWS S3 or Fly.io Volumes for media files.
# The code below is a simplified setup for local development.
# You will need to change this when deploying to production with large files.

# If you use Fly.io Volumes, your MEDIA_ROOT might look like this:
# MEDIA_URL = "/media/"
# MEDIA_ROOT = "/media_volume" 

# For development, you can keep the local file system.
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# --- SECURITY & LOGGING ---
X_FRAME_OPTIONS = 'DENY'
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
CONTACT_EMAIL = 'skinissuesfyp@gmail.com'
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'stream': sys.stdout, # Log to stdout for Fly.io logs
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO' if DEBUG else 'WARNING',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': False,
        },
        'predictor': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': False,
        },
        'chatbot': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': False,
        },
    },
}